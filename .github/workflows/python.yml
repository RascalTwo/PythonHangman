# Also ran via https://github.com/nektos/act,
# hence usage of bash instead of some native options.

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, edited]
    branches:
      - master
  repository_dispatch:
    types: r2-manual-event

defaults:
  run:
    shell: bash

jobs:
  lgtm:
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      CI: true
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1


      - name: Setup Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Setup pip and Poetry cache
        uses: actions/cache@v1
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-pip-and-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-and-poetry-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: mypy
        id: mypy
        run: |
          RC=0;
          poetry run invoke mypy &> MYPY.output || RC=$?;
          cat MYPY.output;
          [[ $RC -eq 0 ]] && echo "::set-output name=success::true" || true;
      - name: pylint
        id: pylint
        run: |
          RC=0;
          poetry run invoke pylint -h &> PYLINT.output || RC=$?;
          cat PYLINT.output;
          [[ $RC -eq 0 ]] && echo "::set-output name=success::true" || true;
      - name: Tests
        id: tests
        run: |
          RC=0;
          poetry run invoke test -h &> TESTS.output || RC=$?;
          cat TESTS.output;
          [[ $RC -eq 0 ]] && echo "::set-output name=success::true" || true;
      - name: Find coverage report
        id: coverage_report
        run: test -f $PWD/coverage.html && echo "::set-output name=exists::1" || true;
      - name: Upload coverage report
        if: steps.coverage_report.outputs.exists
        uses: actions/upload-artifact@v1
        with:
          name: coverage.html
          path: coverage.html

      - name: Find pylint report
        id: pylint_report
        run: test -f $PWD/pylint.html && echo "::set-output name=exists::1" || true;
      - name: Upload pylint report
        if: steps.pylint_report.outputs.exists
        uses: actions/upload-artifact@v1
        with:
          name: pylint.html
          path: pylint.html

# Output the results again - exiting with success/failure based on saved success boolean.
      - name: Output coverage report
        if: steps.coverage_report.outputs.exists
        run: poetry run coverage report
      - name: View linter and test output
        run: |
          mypy=0; [[ "${{ steps.mypy.outputs.success }}" == "true" ]] && mypy=1;
          pylint=0; [[ "${{ steps.pylint.outputs.success }}" == "true" ]] && pylint=1;
          tests=0; [[ "${{ steps.tests.outputs.success }}" == "true" ]] && tests=1;

          [[ mypy -eq 0 ]] && cat MYPY.output && echo "";
          [[ pylint -eq 0 ]] && cat PYLINT.output && echo "";
          [[ tests -eq 0 ]] && cat TESTS.output;

          [[ mypy -eq 1 && pylint -eq 1 && tests -eq 1 ]] && (exit 0) || (exit 1);